import { User, UserUpdateAttribute, UserDeleteAttribute, UserGetAttribute } from '../utils/interfaces/userInterface';
export declare function handleUserRelatedData(channel: string, message: string): Promise<void>;
declare function createUser(body: User): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "userAlreadyExist">;
declare function getUsers(data: any): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
}[]>;
declare function getUserById(params: UserGetAttribute): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare function updateUser(params: any, body: UserUpdateAttribute): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare function deleteUser(params: UserDeleteAttribute): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare function loginCustomerService(data: any): Promise<string>;
declare function changePasswordService(data: any, customerId: string): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "newPassword!=ConfirmPassword" | "userDoesNotExists" | "oldPasswordIncorrect">;
declare function resetPasswordService(data: any): Promise<"userDoesNotExists" | "newPassword!== confirmPassword" | "incorrectOtp" | "otpExpired" | "passwordUpdatedSuccessfully">;
declare function resetPasswordEmailService(data: any): Promise<{
    id?: string;
    firstName: string;
    lastName: string;
    age: number;
    email: string;
    password: string;
    phoneNo: number;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    otp?: number;
    otpExipration?: Date;
    _attributes: User;
    dataValues: User;
    _creationAttributes: User;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof User>(key: K): User[K];
    setDataValue<K_1 extends keyof User>(key: K_1, value: User[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): User;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof User>(key: K_3, value: User[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof User>(key: K_4, value: User[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<User>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<User>;
    previous<K_7 extends keyof User>(key: K_7): User[K_7];
    save(options?: import("sequelize").SaveOptions<User>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<User>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof User>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | User[K_8], options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        firstName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        lastName?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        age?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        email?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        password?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        phoneNo?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otp?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        otpExipration?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<User>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof User>(fields: Partial<User> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    decrement<K_10 extends keyof User>(fields: Partial<User> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<User>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends User>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<User, User>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, User, User>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<User, User>, User, User>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "userDoesNotExists">;
declare const _default: {
    createUser: typeof createUser;
    loginCustomerService: typeof loginCustomerService;
    updateUser: typeof updateUser;
    deleteUser: typeof deleteUser;
    getUsers: typeof getUsers;
    getUserById: typeof getUserById;
    changePasswordService: typeof changePasswordService;
    handleUserRelatedData: typeof handleUserRelatedData;
    resetPasswordService: typeof resetPasswordService;
    resetPasswordEmailService: typeof resetPasswordEmailService;
};
export default _default;
