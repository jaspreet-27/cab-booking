import { Ride } from '../utils/interfaces/rideInterface';
declare function createRide(body: Ride): Promise<{
    id?: string;
    from: string;
    to: string;
    time: Date;
    driverId?: string;
    price: number;
    date: Date;
    status?: import("../utils/enums/rideEnum").Status;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    _attributes: Ride;
    dataValues: Ride;
    _creationAttributes: Ride;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof Ride>(key: K): Ride[K];
    setDataValue<K_1 extends keyof Ride>(key: K_1, value: Ride[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): Ride;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof Ride>(key: K_3, value: Ride[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof Ride>(key: K_4, value: Ride[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<Ride>;
    previous<K_7 extends keyof Ride>(key: K_7): Ride[K_7];
    save(options?: import("sequelize").SaveOptions<Ride>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<Ride>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof Ride>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | Ride[K_8], options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        from?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        to?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        time?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        date?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        driverId?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        price?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        status?: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | import("../utils/enums/rideEnum").Status;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof Ride>(fields: Partial<Ride> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    decrement<K_10 extends keyof Ride>(fields: Partial<Ride> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends Ride>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<Ride, Ride>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, Ride, Ride>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<Ride, Ride>, Ride, Ride>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "rideAlreadyExist" | "userNotFound">;
declare function findRide(data: any): Promise<{
    id?: string;
    from: string;
    to: string;
    time: Date;
    driverId?: string;
    price: number;
    date: Date;
    status?: import("../utils/enums/rideEnum").Status;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    _attributes: Ride;
    dataValues: Ride;
    _creationAttributes: Ride;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof Ride>(key: K): Ride[K];
    setDataValue<K_1 extends keyof Ride>(key: K_1, value: Ride[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): Ride;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof Ride>(key: K_3, value: Ride[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof Ride>(key: K_4, value: Ride[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<Ride>;
    previous<K_7 extends keyof Ride>(key: K_7): Ride[K_7];
    save(options?: import("sequelize").SaveOptions<Ride>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<Ride>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof Ride>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | Ride[K_8], options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        from?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        to?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        time?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        date?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        driverId?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        price?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        status?: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | import("../utils/enums/rideEnum").Status;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof Ride>(fields: Partial<Ride> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    decrement<K_10 extends keyof Ride>(fields: Partial<Ride> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends Ride>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<Ride, Ride>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, Ride, Ride>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<Ride, Ride>, Ride, Ride>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
}[]>;
declare function getUserById(params: Ride): Promise<{
    id?: string;
    from: string;
    to: string;
    time: Date;
    driverId?: string;
    price: number;
    date: Date;
    status?: import("../utils/enums/rideEnum").Status;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    _attributes: Ride;
    dataValues: Ride;
    _creationAttributes: Ride;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof Ride>(key: K): Ride[K];
    setDataValue<K_1 extends keyof Ride>(key: K_1, value: Ride[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): Ride;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof Ride>(key: K_3, value: Ride[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof Ride>(key: K_4, value: Ride[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<Ride>;
    previous<K_7 extends keyof Ride>(key: K_7): Ride[K_7];
    save(options?: import("sequelize").SaveOptions<Ride>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<Ride>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof Ride>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | Ride[K_8], options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        from?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        to?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        time?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        date?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        driverId?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        price?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        status?: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | import("../utils/enums/rideEnum").Status;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof Ride>(fields: Partial<Ride> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    decrement<K_10 extends keyof Ride>(fields: Partial<Ride> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends Ride>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<Ride, Ride>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, Ride, Ride>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<Ride, Ride>, Ride, Ride>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare function updateUser(params: any, body: Ride): Promise<{
    id?: string;
    from: string;
    to: string;
    time: Date;
    driverId?: string;
    price: number;
    date: Date;
    status?: import("../utils/enums/rideEnum").Status;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    _attributes: Ride;
    dataValues: Ride;
    _creationAttributes: Ride;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof Ride>(key: K): Ride[K];
    setDataValue<K_1 extends keyof Ride>(key: K_1, value: Ride[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): Ride;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof Ride>(key: K_3, value: Ride[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof Ride>(key: K_4, value: Ride[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<Ride>;
    previous<K_7 extends keyof Ride>(key: K_7): Ride[K_7];
    save(options?: import("sequelize").SaveOptions<Ride>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<Ride>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof Ride>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | Ride[K_8], options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        from?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        to?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        time?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        date?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        driverId?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        price?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        status?: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | import("../utils/enums/rideEnum").Status;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof Ride>(fields: Partial<Ride> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    decrement<K_10 extends keyof Ride>(fields: Partial<Ride> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends Ride>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<Ride, Ride>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, Ride, Ride>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<Ride, Ride>, Ride, Ride>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare function deleteUser(params: Ride): Promise<{
    id?: string;
    from: string;
    to: string;
    time: Date;
    driverId?: string;
    price: number;
    date: Date;
    status?: import("../utils/enums/rideEnum").Status;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
    deletedBy?: string;
    isDeleted?: boolean;
    _attributes: Ride;
    dataValues: Ride;
    _creationAttributes: Ride;
    isNewRecord: boolean;
    sequelize: import("sequelize").Sequelize;
    where(): object;
    getDataValue<K extends keyof Ride>(key: K): Ride[K];
    setDataValue<K_1 extends keyof Ride>(key: K_1, value: Ride[K_1]): void;
    get(options?: {
        plain?: boolean;
        clone?: boolean;
    }): Ride;
    get<K_2 extends keyof any>(key: K_2, options?: {
        plain?: boolean;
        clone?: boolean;
    }): any[K_2];
    get(key: string, options?: {
        plain?: boolean;
        clone?: boolean;
    }): unknown;
    set<K_3 extends keyof Ride>(key: K_3, value: Ride[K_3], options?: import("sequelize").SetOptions): any;
    set(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    setAttributes<K_4 extends keyof Ride>(key: K_4, value: Ride[K_4], options?: import("sequelize").SetOptions): any;
    setAttributes(keys: Partial<Ride>, options?: import("sequelize").SetOptions): any;
    changed<K_5 extends keyof any>(key: K_5): boolean;
    changed<K_6 extends keyof any>(key: K_6, dirty: boolean): void;
    changed(): false | string[];
    previous(): Partial<Ride>;
    previous<K_7 extends keyof Ride>(key: K_7): Ride[K_7];
    save(options?: import("sequelize").SaveOptions<Ride>): Promise<any>;
    reload(options?: import("sequelize").FindOptions<Ride>): Promise<any>;
    validate(options?: import("sequelize/types/instance-validator").ValidationOptions): Promise<void>;
    update<K_8 extends keyof Ride>(key: K_8, value: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | Ride[K_8], options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    update(keys: {
        id?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        from?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        to?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        time?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        date?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        driverId?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        price?: number | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        status?: import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal | import("../utils/enums/rideEnum").Status;
        createdAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        updatedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedAt?: Date | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        deletedBy?: string | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
        isDeleted?: boolean | import("sequelize/types/utils").Fn | import("sequelize/types/utils").Col | import("sequelize/types/utils").Literal;
    }, options?: import("sequelize").InstanceUpdateOptions<Ride>): Promise<any>;
    destroy(options?: import("sequelize").InstanceDestroyOptions): Promise<void>;
    restore(options?: import("sequelize").InstanceRestoreOptions): Promise<void>;
    increment<K_9 extends keyof Ride>(fields: Partial<Ride> | K_9 | readonly K_9[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    decrement<K_10 extends keyof Ride>(fields: Partial<Ride> | K_10 | readonly K_10[], options?: import("sequelize").IncrementDecrementOptionsWithBy<Ride>): Promise<any>;
    equals(other: any): boolean;
    equalsOneOf(others: readonly any[]): boolean;
    toJSON<T extends Ride>(): T;
    toJSON(): object;
    isSoftDeleted(): boolean;
    _model: import("sequelize").Model<Ride, Ride>;
    addHook<K_11 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_11, name: string, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<any, any>, Ride, Ride>[K_11]): any;
    addHook<K_12 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_12, fn: import("sequelize/types/hooks").SequelizeHooks<import("sequelize").Model<Ride, Ride>, Ride, Ride>[K_12]): any;
    removeHook<K_13 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_13, name: string): any;
    hasHook<K_14 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_14): boolean;
    hasHooks<K_15 extends keyof import("sequelize/types/hooks").SequelizeHooks<M, TModelAttributes, TCreationAttributes>>(hookType: K_15): boolean;
} | "notExist">;
declare const _default: {
    createRide: typeof createRide;
    findRide: typeof findRide;
    getUserById: typeof getUserById;
    updateUser: typeof updateUser;
    deleteUser: typeof deleteUser;
};
export default _default;
